#서울열린데이터(OpenAPI)
library(XML)

reqURL <- "http://openapi.seoul.go.kr:8088"
myKey <- "475170504f6f6f6e35366f4d6c5477"
values <- c(myKey, "xml", "SeoulLibraryTimeInfo", 1, 5)
#─────────────────────────────────────────────────────────────────#
myKey: 서울시 공공데이터 API 개인 인증키입니다.
"xml": 응답 데이터를 XML 형태로 받겠다는 뜻입니다.
"SeoulLibraryTimeInfo": 호출할 서비스 이름(서울시 도서관 정보).
1, 5: 조회할 데이터의 시작 인덱스(1) 와 끝 인덱스(5) 를 의미합니다.
→ 즉, 첫 번째부터 다섯 번째 데이터까지 가져오라는 뜻입니다.
#─────────────────────────────────────────────────────────────────#

req <- paste(c(reqURL, values), collapse = "/")
req

respone <- xmlTreeParse(req, useInternalNodes = TRUE, encoding ="UTF-8")
summary(respone)
#─────────────────────────────────────────────────────────────────#
xmlTreeParse() : URL에서 XML 파일을 읽어들여 R의 XML 트리 객체로 변환합니다.
useInternalNodes = TRUE: XML 노드를 내부적으로 접근 가능하게 만듭니다.
encoding = "UTF-8": 한글 데이터 깨짐 방지.
summary(respone) : XML 객체 구조 요약을 출력합니다.
#─────────────────────────────────────────────────────────────────#

rn <- xmlRoot(respone)
rn

xpathApply(rn, "//MESSAGE", xmlValue)
xpathApply(rn, "//list_total_count", xmlValue)
#─────────────────────────────────────────────────────────────────#
xpathApply() 는 XPath 문법을 사용해 특정 태그를 선택합니다.
"//MESSAGE" : XML 문서 내 모든 <MESSAGE> 태그 값을 추출.
→ 주로 오류나 상태 메시지 확인용입니다.
"//list_total_count" : 전체 데이터 개수를 담은 태그 값을 추출합니다.
#─────────────────────────────────────────────────────────────────#

taDeath <- xmlToDataFrame(nodes = getNodeSet(rn, "//row"))
#─────────────────────────────────────────────────────────────────#
getNodeSet(rn, "//row") : XML에서 <row> 태그를 모두 찾아 노드 리스트로 반환.
xmlToDataFrame() : 이 리스트를 데이터프레임 형태로 변환합니다.
→ 즉, XML을 R에서 다루기 쉬운 표 형태로 만드는 단계입니다.
결과적으로 taDeath 에는 서울시 도서관 정보 (이름, 주소, 운영시간 등)가 들어갑니다.
#─────────────────────────────────────────────────────────────────#
